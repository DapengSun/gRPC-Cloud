# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc
import sys
sys.path.append('..')
from Log import LogHelper_pb2 as LogHelper__pb2


class LogHelperStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.WriteLog = channel.unary_unary(
        '/LogHelper/WriteLog',
        request_serializer=LogHelper__pb2.InRequest.SerializeToString,
        response_deserializer=LogHelper__pb2.OutResponse.FromString,
        )


class LogHelperServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def WriteLog(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_LogHelperServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'WriteLog': grpc.unary_unary_rpc_method_handler(
          servicer.WriteLog,
          request_deserializer=LogHelper__pb2.InRequest.FromString,
          response_serializer=LogHelper__pb2.OutResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'LogHelper', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
